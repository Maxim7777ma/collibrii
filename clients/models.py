from django.contrib.auth.models import Group
from django.db import models
from django.contrib.auth.models import User
class Client(models.Model):

    STATUS_CHOICES = [
        ('lead', '–õ–∏–¥'),
        ('client', '–ö–ª–∏–µ–Ω—Ç'),
        ('customer', '–ó–∞–∫–∞–∑—á–∏–∫'),
    ]

    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
    lead_number = models.AutoField(primary_key=True)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è –ª–∏–¥–æ–≤
    name = models.CharField(max_length=255)
    instagram_link = models.URLField(blank=True, null=True)
    status = models.CharField(max_length=50, choices=STATUS_CHOICES, default='lead')
    manager = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    notes = models.TextField(blank=True, null=True)

    # –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    contact_1 = models.TextField(blank=True, null=True)
    contact_2 = models.TextField(blank=True, null=True)
    contact_3 = models.TextField(blank=True, null=True)
    contact_4 = models.TextField(blank=True, null=True)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return f"{self.lead_number} - {self.name}"


class CustomTable(models.Model):
    name = models.CharField(max_length=255)  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    description = models.TextField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
    updated_at = models.DateTimeField(auto_now=True)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    visible_fields = models.JSONField(default=list, blank=True)  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–Ω–∞ –≥—Ä—É–ø–ø–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø, –º–æ–∂–Ω–æ ManyToManyField.
    group = models.ForeignKey(
        Group,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='tables',
        verbose_name='–ì—Ä—É–ø–ø–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º'
    )
    def __str__(self):
        return self.name

class CustomRow(models.Model):

    STATUS_CHOICES = [
        ('lead', '–õ–∏–¥'),
        ('client', '–ö–ª–∏–µ–Ω—Ç'),
        ('customer', '–ó–∞–∫–∞–∑—á–∏–∫'),
    ]

    CONTACT_CHOICES = [
        ('contact_1', '–ö–æ–Ω—Ç–∞–∫—Ç 1'),
        ('contact_2', '–ö–æ–Ω—Ç–∞–∫—Ç 2'),
        ('contact_3', '–ö–æ–Ω—Ç–∞–∫—Ç 3'),
        ('contact_4', '–ö–æ–Ω—Ç–∞–∫—Ç 4'),
    ]

    PRIORITY_CHOICES = [
        ('low', '–ù–∏–∑–∫–∏–π'),
        ('medium', '–°—Ä–µ–¥–Ω–∏–π'),
        ('high', '–í—ã—Å–æ–∫–∏–π'),
    ]

    # –ü–æ–ª—è
    status = models.CharField(
        max_length=50,
        choices=STATUS_CHOICES,
        default='lead',
        blank=True,
        null=True
    )
    contact = models.CharField(
        max_length=10,
        choices=CONTACT_CHOICES,
        blank=True,
        null=True
    )
    priority = models.CharField(
        max_length=12,
        choices=PRIORITY_CHOICES,
        default='low',
        blank=True,
        null=True
    )

    change_status_contact = models.CharField(
    max_length=10,
    choices=CONTACT_CHOICES,  # üëà –î–æ–±–∞–≤–ª—è–µ–º `choices`
    blank=True,
    null=True
    )
    # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
    table = models.ForeignKey(CustomTable, on_delete=models.CASCADE, related_name="rows", null=False, blank=False)

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    name = models.CharField(max_length=255)  # –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
    instagram_username = models.CharField(max_length=40, blank=True, null=True)  # –ù–∏–∫–Ω–µ–π–º Instagram
    instagram_link = models.URLField(blank=True, null=True)  # –°—Å—ã–ª–∫–∞ Instagram
    phone_number = models.CharField(max_length=20, blank=True, null=True)  # –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    email = models.EmailField(max_length=255, blank=True, null=True, verbose_name='–ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞')
    manager = models.CharField(max_length=255)  # –ú–µ–Ω–µ–¥–∂–µ—Ä (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
    country = models.CharField(max_length=255, blank=True, null=True)  # –ü–æ–ª–µ —Å—Ç—Ä–∞–Ω—ã
    city = models.CharField(max_length=255, blank=True, null=True)  # –ü–æ–ª–µ –≥–æ—Ä–æ–¥–∞
    status = models.CharField(max_length=50, blank=True, null=True, choices=[
        ('lead', '–õ–∏–¥'),
        ('client', '–ö–ª–∏–µ–Ω—Ç'),
        ('customer', '–ó–∞–∫–∞–∑—á–∏–∫')
    ], default='lead')

    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    deal_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    deal_amount_currency = models.CharField(max_length=3, choices=[('UAH', 'UAH'), ('USD', 'USD'), ('EUR', 'EUR')], default='UAH')
    paid_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    paid_amount_currency = models.CharField(max_length=3, choices=[('UAH', 'UAH'), ('USD', 'USD'), ('EUR', 'EUR')], default='UAH')
    expected_profit = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True)
    expected_profit_currency = models.CharField(max_length=3, choices=[('UAH', 'UAH'), ('USD', 'USD'), ('EUR', 'EUR')], default='UAH')

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    contact = models.CharField(max_length=10, blank=True, null=True, choices=[
        ('contact_1', '–ö–æ–Ω—Ç–∞–∫—Ç 1'),
        ('contact_2', '–ö–æ–Ω—Ç–∞–∫—Ç 2'),
        ('contact_3', '–ö–æ–Ω—Ç–∞–∫—Ç 3'),
        ('contact_4', '–ö–æ–Ω—Ç–∞–∫—Ç 4'),
    ])
    change_status_contact = models.CharField(max_length=10, blank=True, null=True, choices=[
        ('contact_1', '–ö–æ–Ω—Ç–∞–∫—Ç 1'),
        ('contact_2', '–ö–æ–Ω—Ç–∞–∫—Ç 2'),
        ('contact_3', '–ö–æ–Ω—Ç–∞–∫—Ç 3'),
        ('contact_4', '–ö–æ–Ω—Ç–∞–∫—Ç 4'),
    ])

    priority = models.CharField(
        max_length=12,
        choices=[
            ('low', '–ù–∏–∑—å–∫–∏–π'),
            ('medium', '–°–µ—Ä–µ–¥–Ω—ñ–π'),
            ('high', '–í–∏—Å–æ–∫–∏–π'),
        ],
        default='low',  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        verbose_name='–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç'
    )

    # –î–∞—Ç—ã
    record_date = models.DateTimeField()  # –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
    due_date = models.DateTimeField(blank=True, null=True)  # –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    inquiry_date = models.DateTimeField(blank=True, null=True)  # –î–∞—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è

    # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    additional_data = models.JSONField(default=dict, blank=True)  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    last_updated = models.DateTimeField(auto_now=True)  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    
    updated_by = models.ManyToManyField(
    User,
    blank=True,
    related_name='updated_rows',
    verbose_name="–ó–º—ñ–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º"
    )   
    def get_updated_by_display(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏: "ANNA, PETRO"
        """
        return ", ".join(self.updated_by.values_list('username', flat=True)) 
      # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    manually_updated = models.BooleanField(
        default=False, 
        verbose_name="–†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ"
    )

    def __str__(self):
        return f"{self.name} - {self.table.name}"
