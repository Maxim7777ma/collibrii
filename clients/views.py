from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.db import transaction 
import pandas as pd
import json
from django.shortcuts import render, get_object_or_404, redirect
from .models import Client
from .forms import ClientForm
from django.db import models
from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Client
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from .models import Client
from django.db.models import Count
from .models import CustomTable, CustomRow
from .forms import CustomRowForm
from .forms import CustomTableForm
from django.db.models import Q
from django.core.exceptions import PermissionDenied
from .forms import FIELD_TRANSLATIONS
from django.shortcuts import render, get_object_or_404
from django.db.models import Q, Count
from django.contrib.auth.decorators import login_required
from .models import Client, CustomTable
from django.contrib.auth.models import User
from django.utils.timezone import localtime
from django.shortcuts import render, get_object_or_404
from django.db.models import Q, Count
from django.contrib.auth.decorators import login_required
from .models import CustomRow, CustomTable
from datetime import datetime

from django.shortcuts import redirect
from django.contrib import messages

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from .models import CustomTable
from .forms import CustomTableForm
import json
from django import template





translations = {
    "status": {
        "lead": "–õ—ñ–¥",
        "client": "–ö–ª—ñ—î–Ω—Ç",
        "customer": "–ó–∞–º–æ–≤–Ω–∏–∫"
    },
    "contact": {
        "contact_1": "–ö–æ–Ω—Ç–∞–∫—Ç 1",
        "contact_2": "–ö–æ–Ω—Ç–∞–∫—Ç 2",
        "contact_3": "–ö–æ–Ω—Ç–∞–∫—Ç 3",
        "contact_4": "–ö–æ–Ω—Ç–∞–∫—Ç 4"
    },
    "priority": {
        "low": "–ù–∏–∑—å–∫–∏–π",
        "medium": "–°–µ—Ä–µ–¥–Ω—ñ–π",
        "high": "–í–∏—Å–æ–∫–∏–π"
    }
}

def your_view(request):
    context = {
        "translations": translations,
        # ... –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    }
    return render(request, "your_template.html", context)





register = template.Library()

@register.filter
def get_item(dictionary, key):
    if dictionary and isinstance(dictionary, dict):
        return dictionary.get(key, "-")  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø
    return "-"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç–æ–π –∏–ª–∏ `None`


@csrf_exempt
def update_field(request, row_id):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è `contact`, `status`, `priority`, `change_status_contact`.
    –ï—Å–ª–∏ `contact` == `change_status_contact`, —Ç–æ `status` –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ `client`.
    """
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            field = data.get("field")  # –ù–∞–ø—Ä–∏–º–µ—Ä, 'contact', 'status' –∏ —Ç. –¥.
            new_value = data.get("value")  # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            row = CustomRow.objects.get(id=row_id)
            setattr(row, field, new_value)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

            auto_status_change = False  # –§–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ-–∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

            # –ï—Å–ª–∏ `contact` –∏ `change_status_contact` —Å–æ–≤–ø–∞–¥–∞—é—Ç, —Å—Ç–∞—Ç—É—Å ‚Üí client
            if field in ["contact", "change_status_contact"]:
                if row.contact and row.change_status_contact and row.contact == row.change_status_contact:
                    row.status = "client"
                    auto_status_change = True  # –°–æ–æ–±—â–∏–º —Ñ—Ä–æ–Ω—Ç—É

            row.save()

            return JsonResponse({
                "success": True,
                "message": f"–ü–æ–ª–µ {field} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                "auto_status_change": auto_status_change
            })
        except CustomRow.DoesNotExist:
            return JsonResponse({"success": False, "error": "–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"}, status=404)
        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)}, status=400)

    return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!"}, status=400)

def get_updated_by_usernames(self):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON –≤ —Å–ø–∏—Å–æ–∫ usernames.
    """
    if not self.additional_data:
        return []

    try:
        data = json.loads(self.additional_data)
        user_ids = data.get('updated_by', [])

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int
        if isinstance(user_ids, str):
            user_ids = [int(user_ids)]
        elif isinstance(user_ids, list):
            user_ids = [int(uid) for uid in user_ids]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ ID –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö usernames
        return list(User.objects.filter(id__in=user_ids).values_list('username', flat=True))

    except (json.JSONDecodeError, ValueError):
        return []

def edit_table(request, table_id):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    table = get_object_or_404(CustomTable, id=table_id)

    if request.method == "POST":
        form = CustomTableForm(request.POST, instance=table)
        if form.is_valid():
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ç–∞–±–ª–∏—Ü—ã
            table = form.save(commit=False)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–ª—é—á–æ–º "name"
            table.visible_fields = [
                {"name": field} if isinstance(field, str) else field
                for field in form.cleaned_data.get('visible_fields', [])
            ]
            table.save()
            messages.success(request, "–¢–∞–±–ª–∏—Ü—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∞.")
            return redirect('custom_table_list')
    else:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º `visible_fields` –∏–∑ JSON (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        visible_fields = table.visible_fields
        if isinstance(visible_fields, str):
            try:
                visible_fields = json.loads(visible_fields)
            except json.JSONDecodeError:
                visible_fields = []

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
        initial_visible_fields = [field["name"] for field in visible_fields if isinstance(field, dict)]
        form = CustomTableForm(instance=table, initial={"visible_fields": initial_visible_fields})

    return render(request, 'clients/edit_table.html', {'form': form, 'table': table})

def delete_table(request, table_id):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
    """
    table = get_object_or_404(CustomTable, id=table_id)

    if request.method == "POST":
        table.delete()
        messages.success(request, "–¢–∞–±–ª–∏—Ü—É —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
        return redirect('custom_table_list')

    return redirect('custom_table_list')


@login_required
def reset_row_filter(request, pk):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    if "filters" in request.session:
        del request.session["filters"]  # ‚úÖ –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏–∑ —Å–µ—Å—Å–∏–∏

    return redirect('custom_row_filter', pk=pk)

from django.utils.timezone import make_aware
import pytz
import logging

logger = logging.getLogger(__name__)

@csrf_exempt
def filter_rows(request, table_pk):
    if request.method == "POST":
        try:
            # ‚úÖ –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON, –ª–æ–≥–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä
            try:
                data = json.loads(request.body.decode("utf-8"))
                logger.debug(f"üì• –§–∏–ª—å—Ç—Ä –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {data}")
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}")
                return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, status=400)

            # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º @ –ø–µ—Ä–µ–¥ –Ω–∏–∫–Ω–µ–π–º–æ–º
            if "instagram_username" in data:
                username = data["instagram_username"].strip()
                if not username.startswith("@"):
                    username = "@" + username
                data["instagram_username"] = username

            data = json.loads(request.body)
            logger.debug(f"üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

            table = get_object_or_404(CustomTable, pk=table_pk)
            rows = CustomRow.objects.filter(table=table)

            disable_pagination = data.pop("disable_pagination", False)

            local_tz = pytz.timezone("Europe/Kyiv")

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–ª–∏ –ª–∏ —Ñ–∏–ª—å—Ç—Ä `instagram_username`
            
            def parse_datetime(date_str, local_tz):
                if not date_str:
                    return None
                try:
                    if "T" in date_str:
                        parsed_date = datetime.strptime(date_str, "%Y-%m-%dT%H:%M")
                    else:
                        parsed_date = datetime.strptime(date_str, "%d-%m-%Y %H:%M")
                    return make_aware(parsed_date, local_tz).astimezone(pytz.UTC)
                except ValueError:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {date_str}")
                    return None

            start_datetime = parse_datetime(data.get("start_datetime"), local_tz)
            end_datetime = parse_datetime(data.get("end_datetime"), local_tz)

            if start_datetime:
                rows = rows.filter(
                    models.Q(inquiry_date__gte=start_datetime) |
                    models.Q(due_date__gte=start_datetime) |
                    models.Q(record_date__gte=start_datetime)
                )

            if end_datetime:
                rows = rows.filter(
                    models.Q(inquiry_date__lte=end_datetime) |
                    models.Q(due_date__lte=end_datetime) |
                    models.Q(record_date__lte=end_datetime)
                )
            
            for field, value in data.items():
                logger.debug(f"üßê –§–∏–ª—å—Ç—Ä: {field} = {value}")  # ‚úÖ –í—ã–≤–µ–¥–µ—Ç –≤—Å–µ –ø–æ–ª—è –ø–µ—Ä–µ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                if field == "instagram_username":
                        if not value.startswith("@"):  # –î–æ–±–∞–≤–ª—è–µ–º "@", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                            value = f"@{value}"
                        rows = rows.filter(instagram_username__icontains=value)
                elif field in ["manager", "status", "contact", "priority", "city", "country"]:
                    rows = rows.filter(**{f"{field}__icontains": value})
                elif field in ["deal_amount", "paid_amount", "expected_profit"]:
                    try:
                        value = float(value)
                        rows = rows.filter(**{f"{field}__gte": value})
                    except ValueError:
                        continue

            rows = list(rows)

            # üî• **–ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤**
            all_rows = CustomRow.objects.filter(table=table)  # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã

            all_instagram_usernames = [row.instagram_username for row in all_rows if row.instagram_username]
            all_phone_numbers = [row.phone_number for row in all_rows if row.phone_number]

            # ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –∏—â–µ–º –ø–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ
            duplicate_usernames = {username for username in all_instagram_usernames if all_instagram_usernames.count(username) > 1}
            duplicate_phones = {phone for phone in all_phone_numbers if all_phone_numbers.count(phone) > 1}


            def format_datetime(value):
                if isinstance(value, datetime):
                    value = localtime(value)  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
                    return value.strftime("%d-%m-%Y %H:%M")
                return value

            filtered_data = []
            for row in rows:
                row_data = {"pk": row.pk, "fields": {}}
                for field in table.visible_fields:
                    field_name = field["name"]
                    field_value = getattr(row, field_name, None)

                    # ‚úÖ –ï—Å–ª–∏ –ø–æ–ª–µ ‚Äî —ç—Ç–æ –¥–∞—Ç–∞/–≤—Ä–µ–º—è, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                    if isinstance(field_value, datetime):
                        field_value = format_datetime(field_value)

                    if isinstance(field_value, models.Manager):
                        field_value = list(field_value.values_list("username", flat=True))

                    row_data["fields"][field_name] = field_value if field_value is not None else "-"
    
                filtered_data.append(row_data)
            logger.debug(f"üì© –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {filtered_data}")

            return JsonResponse({
                "success": True,
                "data": filtered_data,
                "disable_pagination": True,
                "duplicate_usernames": list(duplicate_usernames),
                "duplicate_phones": list(duplicate_phones),
            })

        except json.JSONDecodeError:
            return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON"}, status=400)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ filter_rows: {str(e)}")
            return JsonResponse({"success": False, "error": str(e)}, status=400)

    return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!"}, status=400)

@csrf_exempt
@login_required
def update_priority(request, pk):
    if request.method == 'POST':
        try:
            row = CustomRow.objects.get(pk=pk)
            data = json.loads(request.body)
            priority = data.get('priority')

            if priority in ['low', 'medium', 'high']:
                row.priority = priority
                row.save()
                return JsonResponse({'success': True})
            else:
                return JsonResponse({'success': False, 'error': 'Invalid priority value'})
        except CustomRow.DoesNotExist:
            return JsonResponse({'success': False, 'error': 'Row not found'})
        except Exception as e:
            return JsonResponse({'success': False, 'error': str(e)})
    return JsonResponse({'success': False, 'error': 'Invalid request method'})

@csrf_exempt
def update_status1(request, pk):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.
    """
    if request.method == 'POST':
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            new_status = data.get('status')

            if not new_status:
                return JsonResponse({'error': '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.'}, status=400)

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ pk
            row = get_object_or_404(CustomRow, pk=pk)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ status
            row.status = new_status
            row.save()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            return JsonResponse({
                'success': True,
                'message': '–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!',
                'updated_row': {
                    'id': row.id,
                    'table_id': row.table_id,
                    'status': row.status,
                }
            })

        except Exception as e:
            return JsonResponse({'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}, status=500)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST.'}, status=405)

@csrf_exempt
def update_contact1(request, pk):
    """
    –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è contact.
    """
    if request.method == 'POST':
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            data = json.loads(request.body)
            new_contact = data.get('contact')

            if not new_contact:
                return JsonResponse({'error': '–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ.'}, status=400)

            # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ pk
            row = get_object_or_404(CustomRow, pk=pk)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
            if row.contact == new_contact:
                return JsonResponse({'warning': '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º.'}, status=200)

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ contact
            row.contact = new_contact

            # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            

            row.save()

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            return JsonResponse({
                'success': True,
                'message': '–ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!',
                'updated_row': {
                    'id': row.id,
                    'table_id': row.table_id,
                    'contact': row.contact,
                    'status': row.status,
                }
            })

        except Exception as e:
            return JsonResponse({'error': f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}'}, status=500)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ POST.'}, status=405)
    
def table_rows(request, table_id):
    table = get_object_or_404(CustomTable, id=table_id)
    rows = CustomRow.objects.filter(table=table)
    
    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É Instagram
    duplicate_usernames = rows.values('instagram_username').annotate(count=models.Count('id')).filter(count__gt=1)
    duplicate_usernames = [item['instagram_username'] for item in duplicate_usernames]

    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    duplicate_phones = rows.values('phone_number').annotate(count=models.Count('id')).filter(count__gt=1)
    duplicate_phones = [item['phone_number'] for item in duplicate_phones]

    return render(request, 'table_rows.html', {
        'table': table,
        'rows': rows,
        'duplicate_usernames': duplicate_usernames,
        'duplicate_phones': duplicate_phones,
    })

# –§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
@login_required
def edit_row(request, table_id, row_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Å —É—á—ë—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç—Ä–æ–∫—É –ø–æ ID
    table = get_object_or_404(CustomTable, id=table_id)
    row = get_object_or_404(CustomRow, id=row_id, table=table)

    if request.method == "POST":
        if not request.user.is_authenticated:
            raise PermissionDenied("–í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª–µ–π
        form = CustomRowForm(request.POST, table=table, instance=row, user=request.user)
        if form.is_valid():
            row = form.save(commit=False, user=request.user) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            row.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            return redirect('custom_row_list', table_id=table.id)
        else:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print("–û—à–∏–±–∫–∏ —Ñ–æ—Ä–º—ã:", form.errors)
            print("Form errors:", form.errors)
    else:
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º—É
        form = CustomRowForm(table=table, instance=row, user=request.user)

    return render(
        request, 
        'clients/custom_row_form.html', 
        {'form': form, 'table': table, 'row': row}
    )
def create_table(request):
    """
    –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã.
    """
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
    exclude_fields = ['deal_amount_currency', 'paid_amount_currency', 'expected_profit_currency']

    if request.method == "POST":
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Å POST-–¥–∞–Ω–Ω—ã–º–∏
        form = CustomTableForm(request.POST)
        if form.is_valid():
            table = form.save(commit=False)

            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –∏–∑ —Ñ–æ—Ä–º—ã
            visible_fields = form.cleaned_data['visible_fields']

            # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ø–æ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤–∞–ª—é—Ç–∞–º–∏)
            filtered_fields = [
                {"name": field} for field in visible_fields if field not in exclude_fields
            ]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
            table.visible_fields = json.dumps(filtered_fields)
            table.save()

            return redirect('custom_table_list')  # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
    else:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        form = CustomTableForm()

    return render(request, 'clients/create_table.html', {'form': form})
# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
def delete_row(request, table_id, row_id):
    table = get_object_or_404(CustomTable, id=table_id)
    row = get_object_or_404(CustomRow, id=row_id, table=table)

    if request.method == "POST":
        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
        row.delete()
        return redirect('custom_row_list', table_id=table.id)

    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ POST, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    return render(request, 'clients/confirm_delete.html', {'row': row, 'table': table})

# –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
@csrf_exempt 
def delete_row(request, table_id, pk):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç—Ä–æ–∫—É –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –∫–ª—é—á–∞–º
    table = get_object_or_404(CustomTable, id=table_id)
    row = get_object_or_404(CustomRow, pk=pk, table=table)

    if request.method == "POST":
        row.delete()
        return redirect('custom_row_list', table_id=table.id)

    return render(request, 'clients/confirm_delete.html', {'row': row, 'table': table})

from collections import Counter

from django.shortcuts import render, get_object_or_404
from django.db.models import Count
from .models import CustomTable, CustomRow
import json

def custom_row_list(request, table_id):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.
    """

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    table = get_object_or_404(CustomTable, id=table_id)
    translations = {
        "status": {"lead": "–õ—ñ–¥", "client": "–ö–ª—ñ—î–Ω—Ç", "customer": "–ó–∞–º–æ–≤–Ω–∏–∫"},
        "contact": {"contact_1": "–ö–æ–Ω—Ç–∞–∫—Ç 1", "contact_2": "–ö–æ–Ω—Ç–∞–∫—Ç 2", "contact_3": "–ö–æ–Ω—Ç–∞–∫—Ç 3", "contact_4": "–ö–æ–Ω—Ç–∞–∫—Ç 4"},
        "priority": {"low": "–ù–∏–∑—å–∫–∏–π", "medium": "–°–µ—Ä–µ–¥–Ω—ñ–π", "high": "–í–∏—Å–æ–∫–∏–π"}
    }

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è (–µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ JSON, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º)
    if isinstance(table.visible_fields, str):
        try:
            visible_fields = json.loads(table.visible_fields)
        except json.JSONDecodeError:
            visible_fields = []
    else:
        visible_fields = table.visible_fields or []

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π
    visible_fields = [
        {"name": field["name"], "label": FIELD_TRANSLATIONS.get(field["name"], field["name"])}
        for field in visible_fields if isinstance(field, dict)
    ]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ select
    select_fields = ["contact", "status", "priority", "change_status_contact"]
    allowed_fields = [field["name"] for field in visible_fields if field["name"] in select_fields]

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è select (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π)
    choices = {}
    for field in allowed_fields:
        choices[field] = list(CustomRow.objects.values_list(field, flat=True).distinct())

    # --- üîπ –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ---
    filters = {key: request.GET[key] for key in request.GET if request.GET[key] and key != 'page'}
    query = Q(table=table)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    for key, value in filters.items():
        query &= Q(**{f"{key}__icontains": value})

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    rows = CustomRow.objects.filter(query).order_by("-id")

    # --- üîπ –ü–û–ò–°–ö –î–£–ë–õ–ò–ö–ê–¢–û–í (–ø–æ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü–µ) ---
    all_rows = CustomRow.objects.filter(table=table)
    duplicate_usernames = [
        key for key, count in Counter(
            all_rows.values_list("instagram_username", flat=True)
        ).items() if count > 1
    ]
    duplicate_phones = [
        key for key, count in Counter(
            all_rows.values_list("phone_number", flat=True)
        ).items() if count > 1
    ]

    # --- üîπ –ü–ê–ì–ò–ù–ê–¶–ò–Ø (–ø–æ 20 —Å—Ç—Ä–æ–∫) ‚Äî –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ü–ê–ì–ò–ù–ê–¶–ò–ò, –ï–°–õ–ò –§–ò–õ–¨–¢–†–´ –ü–†–ò–ú–ï–ù–ï–ù–´
    paginator = None
    if not filters:  # –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        paginator = Paginator(rows, 20)
        page = request.GET.get("page")
        try:
            rows = paginator.page(page)
        except PageNotAnInteger:
            rows = paginator.page(1)
        except EmptyPage:
            rows = paginator.page(paginator.num_pages)

    # --- üîπ –û–ë–†–ê–ë–û–¢–ö–ê additional_data (JSON –ø–æ–ª—è) ---
    for row in rows:
        if isinstance(row.additional_data, str):
            try:
                row.additional_data = json.loads(row.additional_data)
            except json.JSONDecodeError:
                row.additional_data = {}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–µ updated_by (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ usernames)
        updated_by_ids = row.additional_data.get("updated_by", [])

        if isinstance(updated_by_ids, str):
            updated_by_ids = updated_by_ids.strip("[]").replace("'", "").split(", ")

        updated_by_ids = [int(uid) for uid in updated_by_ids if str(uid).isdigit()]
        users = User.objects.filter(id__in=updated_by_ids).values_list("username", flat=True)
        row.updated_by_names = ", ".join(users) if users else "-"

    # --- üîπ –í–´–í–û–î –í –®–ê–ë–õ–û–ù ---
    return render(request, "clients/custom_row_list.html", {
        "table": table,
        "rows": rows,  # ‚úÖ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã)
        "visible_fields": visible_fields,
        "duplicate_usernames": list(duplicate_usernames),
        "duplicate_phones": list(duplicate_phones),
        "field_translations": FIELD_TRANSLATIONS,
        "allowed_fields": allowed_fields,
        "choices": choices,
        "filters": filters,  # ‚úÖ –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –≤ —à–∞–±–ª–æ–Ω
        "paginator": paginator,  # ‚úÖ –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞, –ø–µ—Ä–µ–¥–∞–µ–º None
        "current_page": 1 if paginator else 1,  # –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–µ–ª–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É 1
        "total_pages": 1 if paginator is None else paginator.num_pages,  # –ï—Å–ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–¥–Ω–∞
        "translations": translations,  # –î–æ–±–∞–≤—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç!
    })


# === –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã ===
def custom_table_create(request):
    if request.method == "POST":
        form = CustomTableForm(request.POST)
        if form.is_valid():
            table = form.save(commit=False)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–¥–∏–º—ã–µ –ø–æ–ª—è –≤ –≤–∏–¥–µ JSON
            table.visible_fields = [{"name": field} for field in form.cleaned_data['visible_fields']]
            table.save()
            return redirect('custom_table_list')
    else:
        form = CustomTableForm()
    return render(request, 'clients/create_table.html', {'form': form})

# === –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü ===
def custom_table_list(request):
    tables = CustomTable.objects.all()
    return render(request, 'clients/table_list.html', {'tables': tables})  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É


def add_row(request, table_id):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ ID
    table = get_object_or_404(CustomTable, id=table_id)
    
    if request.method == "POST":
        # –ü–µ—Ä–µ–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –≤ —Ñ–æ—Ä–º—É
        form = CustomRowForm(request.POST, table=table, user=request.user)
        if form.is_valid():
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
            row = form.save(commit=False, user=request.user, table=table)
            row.table = table  # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∫ —Ç–∞–±–ª–∏—Ü–µ
            if not row.table:  # ‚úÖ –ï—Å–ª–∏ `table` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–≤–Ω–æ
                row.table = table  
            row.save()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ –ë–î
            row.manually_updated = form.cleaned_data.get('manually_updated', False)
            return redirect('custom_row_list', table_id=table.id)
        else:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            print(form.errors)
            print("Form errors:", form.errors)
    else:
        # –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é —Ñ–æ—Ä–º—É, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–∞–±–ª–∏—Ü—É
        form = CustomRowForm(table=table, user=request.user)

    # –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —à–∞–±–ª–æ–Ω–∞ —Å —Ñ–æ—Ä–º–æ–π
    return render(
        request,
        'clients/custom_row_form.html',
        {
            'form': form,
            'table': table
        }
    )


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ ===
@csrf_exempt
def check_duplicate_link(request):
    if request.method == "POST":
        link = request.POST.get('link')  # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ —Ñ–æ—Ä–º—ã
        duplicate = Client.objects.filter(instagram_link=link).exists()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–∞
        return JsonResponse({'is_duplicate': duplicate})
    return JsonResponse({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'}, status=400)


# === –û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
def client_list_all(request):
    clients = Client.objects.all()
    managers = Client.objects.values_list('manager', flat=True).distinct()
    return render(request, 'clients/client_list.html', {
        'clients': clients,
        'managers': managers
    })


# === –°–ø–∏—Å–æ–∫ –ª–∏–¥–æ–≤ ===
def client_list_leads(request):
    clients = Client.objects.filter(status='lead')

    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
    duplicates = clients.values('instagram_link').annotate(count=Count('instagram_link')).filter(count__gt=1)
    duplicate_links = [item['instagram_link'] for item in duplicates]

    managers = Client.objects.values_list('manager', flat=True).distinct()
    return render(request, 'clients/client_list.html', {
        'clients': clients,
        'managers': managers,
        'duplicate_links': duplicate_links
    })


# === –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===
def client_list_clients(request):
    clients = Client.objects.filter(status='client')

    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
    duplicates = clients.values('instagram_link').annotate(count=Count('instagram_link')).filter(count__gt=1)
    duplicate_links = [item['instagram_link'] for item in duplicates]

    managers = Client.objects.values_list('manager', flat=True).distinct()
    return render(request, 'clients/client_list.html', {
        'clients': clients,
        'managers': managers,
        'duplicate_links': duplicate_links
    })


# === –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ ===
def client_list_customers(request):
    clients = Client.objects.filter(status='customer')

    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
    duplicates = clients.values('instagram_link').annotate(count=Count('instagram_link')).filter(count__gt=1)
    duplicate_links = [item['instagram_link'] for item in duplicates]

    managers = Client.objects.values_list('manager', flat=True).distinct()
    return render(request, 'clients/client_list.html', {
        'clients': clients,
        'managers': managers,
        'duplicate_links': duplicate_links
    })


@csrf_exempt
def update_status(request, pk):
    if request.method == "POST":
        try:
            client = Client.objects.get(pk=pk)
            status = request.POST.get('status')
            client.status = status
            client.save()
            return JsonResponse({'success': True})
        except Client.DoesNotExist:
            return JsonResponse({'success': False, 'error': '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'})
    return JsonResponse({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'})

@csrf_exempt
def update_contact(request, row_id):
    if request.method == "POST":
        contact = request.POST.get('contact')
        row = get_object_or_404(CustomRow, id=row_id)

        row.contact = contact

        # –õ–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if contact == 'contact_1':
            row.status = 'client'
        else:
            row.status = 'lead'

        row.save()

        return JsonResponse({'success': True, 'status': row.status})

    return JsonResponse({'success': False, 'error': 'Invalid request'}, status=400)


@login_required
def main_dashboard(request):
    return render(request, 'clients/index.html')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
def logout_view(request):
    logout(request)
    return redirect('login')

# –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
@login_required
def client_list_all(request):
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    query = request.GET.get('q')
    link_query = request.GET.get('link')
    status_filter = request.GET.get('status')  # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    manager_filter = request.GET.get('manager')  # –§–∏–ª—å—Ç—Ä –ø–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É

    # –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—Å–µ –∫–ª–∏–µ–Ω—Ç—ã
    clients = Client.objects.all()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if query:
        clients = clients.filter(name__icontains=query)
    if link_query:
        clients = clients.filter(instagram_link__icontains=link_query)
    if status_filter:
        clients = clients.filter(status=status_filter)  # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if manager_filter:
        clients = clients.filter(manager__icontains=manager_filter)

    # –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
    duplicates = clients.values('instagram_link').annotate(count=models.Count('instagram_link')).filter(count__gt=1)
    duplicate_links = [item['instagram_link'] for item in duplicates]

    # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
    managers = Client.objects.values_list('manager', flat=True).distinct()
    return render(request, 'clients/client_list.html', {
        'clients': clients,
        'duplicate_links': duplicate_links,
        'managers': managers
    })

@login_required
def client_create(request):
    if request.method == "POST":
        form = ClientForm(request.POST)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
        link = request.POST.get('instagram_link')
        confirm_duplicate = request.POST.get('confirm_duplicate')

        if Client.objects.filter(instagram_link=link).exists() and confirm_duplicate != 'yes':
            # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω—ë–º —Ñ–æ—Ä–º—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            return render(request, 'clients/client_form.html', {'form': form})

        # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        if form.is_valid():
            form.save()
            return redirect('client_list')
    else:
        form = ClientForm()
    return render(request, 'clients/client_form.html', {'form': form})


@login_required
def client_edit(request, pk):
    client = get_object_or_404(Client, pk=pk)
    if request.method == "POST":
        form = ClientForm(request.POST, instance=client)
        if form.is_valid():
            form.save()
            return redirect('client_list')
    else:
        form = ClientForm(instance=client)
    return render(request, 'clients/client_form.html', {'form': form})


@csrf_exempt
def delete_client(request, pk):
    if request.method == "POST":
        client = get_object_or_404(Client, pk=pk)  # –ù–∞—Ö–æ–¥–∏–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ ID
        client.delete()  # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return HttpResponse(status=200)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—Ö–∞
    return HttpResponse(status=400)  # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ POST

@login_required
def main_dashboard(request):
    total_clients = Client.objects.count()
    leads = Client.objects.filter(status='lead').count()
    clients = Client.objects.filter(status='client').count()
    customers = Client.objects.filter(status='customer').count()
    return render(request, 'clients/index.html', {
        'total_clients': total_clients,
        'leads': leads,
        'clients': clients,
        'customers': customers,
    })


logger = logging.getLogger(__name__)

# üîπ –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
CONTACT_TRANSLATIONS = {
    "–ö–æ–Ω—Ç–∞–∫—Ç 1": "contact_1",
    "–ö–æ–Ω—Ç–∞–∫—Ç 2": "contact_2",
    "–ö–æ–Ω—Ç–∞–∫—Ç 3": "contact_3",
    "–ö–æ–Ω—Ç–∞–∫—Ç 4": "contact_4"
}

# üîπ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–≥–¥–µ 4 ‚Äì —Å–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π, 1 ‚Äì —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π)
CONTACT_PRIORITY = {"contact_1": 1, "contact_2": 2, "contact_3": 3, "contact_4": 4}

@csrf_exempt
def upload_excel(request, table_pk):
    """
    –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ Excel-—Ñ–∞–π–ª–∞ –≤ —Ç–∞–±–ª–∏—Ü—É CustomTable —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    –∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏.
    """
    table = get_object_or_404(CustomTable, pk=table_pk)

    if request.method == "POST" and request.FILES.get("file"):
        try:
            uploaded_file = request.FILES["file"]
            df = pd.read_excel(uploaded_file, dtype=str, keep_default_na=False)  # –ß–∏—Ç–∞–µ–º Excel

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            print("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", df.columns.tolist())

            if "FIELD_TRANSLATIONS" in globals():
                FIELD_TRANSLATIONS_REVERSE = {v: k for k, v in FIELD_TRANSLATIONS.items()}
                df.rename(columns=FIELD_TRANSLATIONS_REVERSE, inplace=True)

            print("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:", df.columns.tolist())

            # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º `visible_fields`
            if isinstance(table.visible_fields, str):
                try:
                    visible_fields = json.loads(table.visible_fields)
                except json.JSONDecodeError:
                    visible_fields = []
            else:
                visible_fields = table.visible_fields or []

            # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            allowed_columns = [field["name"] for field in visible_fields if isinstance(field, dict)]
            df = df[[col for col in allowed_columns if col in df.columns]]

            print("–§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:", df.columns.tolist())

            # ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
            if "contact" in df.columns:
                df["contact"] = df["contact"].map(CONTACT_TRANSLATIONS).fillna(df["contact"])

            # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            if df.empty:
                return JsonResponse({"success": False, "error": "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!"})

            # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
            existing_rows = CustomRow.objects.filter(table=table).values("id", "instagram_username", "phone_number", "contact")
            
            existing_dict = {}  # –•—Ä–∞–Ω–∏–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
            for row in existing_rows:
                key = row["instagram_username"] or row["phone_number"]
                if key:
                    if key not in existing_dict:
                        existing_dict[key] = []
                    existing_dict[key].append((row["id"], row["contact"]))

            # ‚úÖ –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            duplicates = {}
            for _, row in df.iterrows():
                row_data = row.to_dict()
                key = row_data.get("instagram_username") or row_data.get("phone_number")

                if key:
                    if key not in duplicates:
                        duplicates[key] = []
                    duplicates[key].append(row_data)

            # ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
            new_entries = []
            to_delete = []

            for key, entries in duplicates.items():
                best_entry = max(entries, key=lambda x: CONTACT_PRIORITY.get(x.get("contact"), 0))

                if key in existing_dict:
                    to_delete.extend([r[0] for r in existing_dict[key]])

                best_entry["additional_data"] = json.dumps(best_entry)
                new_entries.append(CustomRow(table=table, **best_entry))

            # ‚úÖ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            if to_delete:
                CustomRow.objects.filter(id__in=to_delete).delete()
                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(to_delete)} –∑–∞–ø–∏—Å–µ–π —Å –º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º.")

            # ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
            CustomRow.objects.bulk_create(new_entries)

            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_entries)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π.")

            # ‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ
            total_rows = len(df)

            # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —É–∂–µ –±—ã–ª–∏ –≤ –ë–î)
            duplicate_rows = len(to_delete)

            # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
            uploaded_rows = len(new_entries)

            # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (–µ—Å–ª–∏ –∑–∞–º–µ–Ω—è–ª–∏ –Ω–∞ –±–æ–ª–µ–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)
            updated_rows = len(to_delete) - len(new_entries)

            # ‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å)
            deleted_rows = duplicate_rows - updated_rows


            # ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í—Å–µ–≥–æ: {total_rows}, –î—É–±–ª–∏–∫–∞—Ç—ã: {duplicate_rows}, –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded_rows}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_rows}, –£–¥–∞–ª–µ–Ω–æ: {deleted_rows}")

            # ‚úÖ JSON-–æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
            return JsonResponse({
                "success": True,
                "total_rows": total_rows,        
                "duplicate_rows": duplicate_rows, 
                "uploaded_rows": uploaded_rows,   
                "updated_rows": updated_rows,    
                "deleted_rows": deleted_rows,    
            })
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
            return JsonResponse({"success": False, "error": str(e)})

    return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!"})

@csrf_exempt
def resolve_duplicate(request, table_pk):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –∑–∞–º–µ–Ω–∏—Ç—å, –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å.
    """
    if request.method == "POST":
        data = json.loads(request.body)
        existing_id = data.get("existing_id")
        new_data = data.get("new_data")
        action = data.get("action")

        try:
            if action == "replace":
                row = CustomRow.objects.get(id=existing_id)
                for key, value in new_data.items():  # ‚úÖ –ù–ï –î–ï–õ–ê–ï–ú `json.loads()`
                    setattr(row, key, value)
                row.save()
            
            elif action == "add":
                CustomRow.objects.create(**new_data, table_id=table_pk)  # ‚úÖ –ù–ï –î–ï–õ–ê–ï–ú `json.loads()`

            return JsonResponse({"success": True})
        
        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)})
    
    return JsonResponse({"success": False, "error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å!"})