from django.db import models
from django.contrib.auth.models import User
from datetime import date




from django.db import models



# üìå –ú–æ–¥–µ–ª—å –¥–ª—è —É—Å–ª—É–≥ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
class ServicePriceList(models.Model):
    service_code = models.CharField(max_length=50, unique=True, verbose_name="–ö–æ–¥ —É—Å–ª—É–≥–∏")  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ —É—Å–ª—É–≥–∏
    service_name = models.CharField(max_length=255, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")  # –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
    service_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏")  # –°—Ç–æ–∏–º–æ—Å—Ç—å

    def __str__(self):
        return f"{self.service_code} - {self.service_name} ({self.service_price} –≥—Ä–Ω)"

    class Meta:
        verbose_name = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ª—É–≥–∏"
        verbose_name_plural = "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç —É—Å–ª—É–≥"

# üìå –ú–æ–¥–µ–ª—å —Ñ–∏–ª–∏–∞–ª–∞ –∫–ª–∏–Ω–∏–∫–∏
class ClinicBranch(models.Model):
    branch_name = models.CharField(max_length=100, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞")  # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª–∏–∞–ª–∞
    branch_address = models.CharField(max_length=255, verbose_name="–ê–¥—Ä–µ—Å —Ñ–∏–ª–∏–∞–ª–∞")  # –ê–¥—Ä–µ—Å —Ñ–∏–ª–∏–∞–ª–∞
    work_schedule = models.JSONField(blank=True, null=True, verbose_name="–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã")  # –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

    def __str__(self):
        return self.branch_name
    class Meta:
        verbose_name = "–§–∏–ª–∏–∞–ª –∫–ª–∏–Ω–∏–∫–∏"
        verbose_name_plural = "–§–∏–ª–∏–∞–ª—ã –∫–ª–∏–Ω–∏–∫–∏"

    def get_work_schedule_display(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if self.work_schedule:
            return "\n".join([f"{day}: {hours}" for day, hours in self.work_schedule.items()])
        return "–ì—Ä–∞—Ñ–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"
    




# üìå –ö–∞–±–∏–Ω–µ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏ (—Å–≤—è–∑–∞–Ω—ã —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏)
class ClinicRoom(models.Model):
    branch = models.ForeignKey(ClinicBranch, on_delete=models.CASCADE, related_name='rooms', verbose_name="–§–∏–ª–∏–∞–ª")  # –ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Ñ–∏–ª–∏–∞–ª—É
    room_number = models.CharField(max_length=50, verbose_name="–ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞")  # –ù–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞

    def __str__(self):
        return f"{self.branch.branch_name} - –ö–∞–±–∏–Ω–µ—Ç {self.room_number}"
    
    class Meta:
        verbose_name = "–ö–∞–±–∏–Ω–µ—Ç"
        verbose_name_plural = "–ö–∞–±–∏–Ω–µ—Ç—ã"


class Specialization(models.Model):
    name = models.CharField(max_length=100, verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
        verbose_name_plural = "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"


# üìå –í—Ä–∞—á–∏ (–º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞—Ö –∏ –∫–∞–±–∏–Ω–µ—Ç–∞—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ä–∞–∑–Ω—ã–µ —É—Å–ª—É–≥–∏)
class Doctor(models.Model):
    fool_name = models.CharField(max_length=400, verbose_name="–ü–æ–ª–Ω–æ–µ –§–ò–û", default="–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    gender = models.CharField(max_length=10, choices=[('male', '–ú—É–∂—Å–∫–æ–π'), ('female', '–ñ–µ–Ω—Å–∫–∏–π')], verbose_name="–ü–æ–ª")
    email = models.EmailField(blank=True, null=True, verbose_name="Email")
    
    # üìå –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    phone_number_1 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω 1")
    phone_number_2 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω 2")
    phone_number_3 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω 3")
    address = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å")


    gender = models.CharField(max_length=10, choices=[('male', '–ú—É–∂—Å–∫–æ–π'), ('female', '–ñ–µ–Ω—Å–∫–∏–π')], verbose_name="–ü–æ–ª")
    birth_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    photo = models.ImageField(upload_to='doctors_photos/', blank=True, null=True, verbose_name="–§–æ—Ç–æ")

    branch = models.ForeignKey(ClinicBranch, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–§–∏–ª–∏–∞–ª —Ä–∞–±–æ—Ç—ã")
    room = models.ForeignKey(ClinicRoom, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö–∞–±–∏–Ω–µ—Ç")
    services = models.ManyToManyField(ServicePriceList, blank=True, verbose_name="–û–∫–∞–∑—ã–≤–∞–µ–º—ã–µ —É—Å–ª—É–≥–∏")  # –£—Å–ª—É–≥–∏ –≤—Ä–∞—á–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ)


    @property
    def age(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if self.birth_date:
            today = date.today()
            return today.year - self.birth_date.year - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))
        return None


    # üìå –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    specializations = models.ManyToManyField(Specialization, verbose_name="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    education = models.TextField(blank=True, null=True, verbose_name="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
    experience_years = models.PositiveIntegerField(blank=True, null=True, verbose_name="–û–ø—ã—Ç (–ª–µ—Ç)")
    certifications = models.TextField(blank=True, null=True, verbose_name="–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")# –Ω–∞–¥–æ –∏–∑–æ–±—Ä–∞–∂–ø–Ω–∏–µ–º —Å–¥–µ–ª–∞—Ç—å
    languages = models.CharField(max_length=255, blank=True, null=True, verbose_name="–Ø–∑—ã–∫–∏")

        # üìå –†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫
    work_schedule = models.JSONField(blank=True, null=True, verbose_name="–†–∞–±–æ—á–∏–π –≥—Ä–∞—Ñ–∏–∫")

    # üìå –ü—Ä–æ—á–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notes = models.TextField(blank=True, null=True, verbose_name="–ó–∞–º–µ—Ç–∫–∏")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")



    car_number_1 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è 1")
    car_number_2 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è 2")


    # üìå –°–æ—Ü—Å–µ—Ç–∏
    instagram_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Instagram –ù–∏–∫")
    instagram_link = models.URLField(blank=True, null=True, verbose_name="Instagram –°—Å—ã–ª–∫–∞")
    instagram_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Instagram –¢–µ–ª–µ—Ñ–æ–Ω")

    telegram_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Telegram –ù–∏–∫")
    telegram_link = models.URLField(blank=True, null=True, verbose_name="Telegram –°—Å—ã–ª–∫–∞")
    telegram_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Telegram –¢–µ–ª–µ—Ñ–æ–Ω")

    facebook_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Facebook –ù–∏–∫")
    facebook_link = models.URLField(blank=True, null=True, verbose_name="Facebook –°—Å—ã–ª–∫–∞")
    facebook_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Facebook –¢–µ–ª–µ—Ñ–æ–Ω")

    whatsapp_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="WhatsApp –ù–∏–∫")
    whatsapp_link = models.URLField(blank=True, null=True, verbose_name="WhatsApp –°—Å—ã–ª–∫–∞")
    whatsapp_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="WhatsApp –¢–µ–ª–µ—Ñ–æ–Ω")

    viber_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Viber –¢–µ–ª–µ—Ñ–æ–Ω")

    branch_work = models.CharField(max_length=255, blank=True, null=True, verbose_name="–§–∏–ª–∏–∞–ª —Ä–∞–±–æ—Ç—ã")

    branch_work2 = models.CharField(max_length=255, blank=True, null=True, verbose_name="–§–∏–ª–∏–∞–ª —Ä–∞–±–æ—Ç—ã2")

    branch_work3 = models.CharField(max_length=255, blank=True, null=True, verbose_name="–§–∏–ª–∏–∞–ª —Ä–∞–±–æ—Ç—ã3")
    # üìå –°–≤—è–∑—å —Å —Ñ–∏–ª–∏–∞–ª–æ–º –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–º
    branch = models.ForeignKey(ClinicBranch, on_delete=models.SET_NULL, null=True, blank=True, related_name='doctors', verbose_name="–§–∏–ª–∏–∞–ª")
    room = models.ForeignKey(ClinicRoom, on_delete=models.SET_NULL, null=True, blank=True, related_name='doctors', verbose_name="–ö–∞–±–∏–Ω–µ—Ç")
    services = models.ManyToManyField(ServicePriceList, verbose_name="–û–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏")  # –£—Å–ª—É–≥–∏, –æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—É
    # —É—Å–ª—É–≥–∏ –Ω–æ–º–µ—Ä —É—Å–ª—É–≥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —Ü–µ–Ω–∞ —É—Å–ª—É–≥–∏


    def __str__(self):
        return f"{self.fool_name}"
    
    class Meta:
        verbose_name = "–í—Ä–∞—á"
        verbose_name_plural = "–í—Ä–∞—á–∏"

# üìå –ú–µ–¥—Å–µ—Å—Ç—Ä—ã (–ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ñ–∏–ª–∏–∞–ª–∞–º –∏ –∫–∞–±–∏–Ω–µ—Ç–∞–º)
class Nurse(models.Model):
    fool_name = models.CharField(max_length=400, verbose_name="–ü–æ–ª–Ω–æ–µ –§–ò–û", default="–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    email = models.EmailField(blank=True, null=True, verbose_name="Email")
    phone_number = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    branch = models.ForeignKey(ClinicBranch, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–§–∏–ª–∏–∞–ª —Ä–∞–±–æ—Ç—ã")
    room = models.ForeignKey(ClinicRoom, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ö–∞–±–∏–Ω–µ—Ç")

    def __str__(self):
        return f"{self.fool_name}"

    class Meta:
        verbose_name = "–ú–µ–¥—Å–µ—Å—Ç—Ä–∞"
        verbose_name_plural = "–ú–µ–¥—Å–µ—Å—Ç—Ä—ã"


# üìå –ó–∞–ø–∏—Å—å –Ω–∞ –≤–∏–∑–∏—Ç
class VisitRecord(models.Model):
    RECORD_STATUS = [
        ('pending', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),  # –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        ('paid', '–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞'),  # –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        ('completed', '–ü—Ä–æ–≤–µ–¥–µ–Ω–æ'),  # –£—Å–ª—É–≥–∞ –æ–∫–∞–∑–∞–Ω–∞, –Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        ('paid_finish', '–û–ø–ª–∞—á–µ–Ω–æ'),  # –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ -> –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    ]

    patient = models.ForeignKey('Pacient', on_delete=models.CASCADE, verbose_name="–ü–∞—Ü–∏–µ–Ω—Ç")  # –ü–∞—Ü–∏–µ–Ω—Ç
    doctor = models.ForeignKey(Doctor, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–í—Ä–∞—á")  # –í—Ä–∞—á
    nurse = models.ForeignKey(Nurse, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ú–µ–¥—Å–µ—Å—Ç—Ä–∞")  # –ú–µ–¥—Å–µ—Å—Ç—Ä–∞
    visit_date = models.DateField(verbose_name="–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞")  # –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞
    visit_time = models.TimeField(verbose_name="–í—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞")  # –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞

    visit_end_time = models.TimeField(verbose_name="–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", null=True, blank=True)
    
    duration_minutes = models.PositiveIntegerField(verbose_name="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–≤ –º–∏–Ω—É—Ç–∞—Ö)", default=10)


    services = models.ManyToManyField(ServicePriceList, verbose_name="–û–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏", blank=True)  # –£—Å–ª—É–≥–∏, –æ–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç—É
    total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞")  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤–∏–∑–∏—Ç–∞
    payment_status = models.CharField(max_length=20, choices=RECORD_STATUS, default='pending', verbose_name="–°—Ç–∞—Ç—É—Å –≤–∏–∑–∏—Ç–∞")  # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    is_online = models.BooleanField(default=False, verbose_name="–û–Ω–ª–∞–π–Ω –ø—Ä–∏–µ–º")  # –û–Ω–ª–∞–π–Ω –∏–ª–∏ –æ–±—ã—á–Ω—ã–π –ø—Ä–∏–µ–º

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏")  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏")  # –î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    description = models.TextField(blank=True, null=True, verbose_name="–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑–∏—Ç–∞")  # –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏

    clinic_branch = models.ForeignKey(
        'ClinicBranch', 
        on_delete=models.CASCADE, 
        verbose_name="–§–∏–ª–∏–∞–ª",
        null=True, blank=True
    )  # –§–∏–ª–∏–∞–ª –∫–ª–∏–Ω–∏–∫–∏, –≥–¥–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–∏—ë–º

    clinic_room = models.ForeignKey(
        'ClinicRoom', 
        on_delete=models.CASCADE, 
        verbose_name="–ö–∞–±–∏–Ω–µ—Ç",
        null=True, blank=True
    )  # –ö–∞–±–∏–Ω–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ–∏–ª–∏–∞–ª–∞

    def save(self, *args, **kwargs):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º `visit_end_time` –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏"""
        if self.visit_time and self.duration_minutes:
            from datetime import timedelta, datetime
            if isinstance(self.visit_date, str):
                self.visit_date = datetime.strptime(self.visit_date, "%Y-%m-%d").date()

            if isinstance(self.visit_time, str):
                self.visit_time = datetime.strptime(self.visit_time, "%H:%M").time()
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ `duration_minutes` –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã

            if self.duration_minutes and self.duration_minutes > 1440:  # 1440 –º–∏–Ω—É—Ç = 24 —á–∞—Å–∞
                self.duration_minutes = 1440  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ —Å—É—Ç–æ–∫
                # üõ† **–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ `duration_minutes` –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π, –¥–µ–ª–∞–µ–º –µ–≥–æ 0**
            if self.duration_minutes < 0:
                self.duration_minutes = 0
                    
    
            visit_start = datetime.combine(self.visit_date, self.visit_time)
            self.visit_end_time = (visit_start + timedelta(minutes=self.duration_minutes)).time()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.patient} - {self.doctor} ({self.visit_date} {self.visit_time}) ({self.duration_minutes} –º–∏–Ω)"

    class Meta:
        verbose_name = "–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º"
        verbose_name_plural = "–ó–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º"

# üìå –ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤ (–ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
class VisitHistory(models.Model):
    patient = models.ForeignKey('Pacient', on_delete=models.CASCADE, verbose_name="–ü–∞—Ü–∏–µ–Ω—Ç")  # –ü–∞—Ü–∏–µ–Ω—Ç
    doctor = models.ForeignKey(Doctor, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–í—Ä–∞—á")  # –í—Ä–∞—á
    nurse = models.ForeignKey(Nurse, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="–ú–µ–¥—Å–µ—Å—Ç—Ä–∞")  # –ú–µ–¥—Å–µ—Å—Ç—Ä–∞
    visit_date = models.DateField(verbose_name="–î–∞—Ç–∞ –≤–∏–∑–∏—Ç–∞")  # –î–∞—Ç–∞ –ø—Ä–∏–µ–º–∞
    visit_time = models.TimeField(verbose_name="–í—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞")  # –í—Ä–µ–º—è –ø—Ä–∏–µ–º–∞
    services = models.ManyToManyField(ServicePriceList, verbose_name="–û–∫–∞–∑–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏")  # –£—Å–ª—É–≥–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    total_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∏–∑–∏—Ç–∞")  # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –≤–∏–∑–∏—Ç–∞
    is_online = models.BooleanField(default=False, verbose_name="–û–Ω–ª–∞–π–Ω –ø—Ä–∏–µ–º")  # –ë—ã–ª –ª–∏ –ø—Ä–∏–µ–º –æ–Ω–ª–∞–π–Ω

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é")  # –î–∞—Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é

    def __str__(self):
        return f"–ò—Å—Ç–æ—Ä–∏—è {self.id} - {self.patient} ({self.visit_date})"

    class Meta:
        verbose_name = "–ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–∞"
        verbose_name_plural = "–ò—Å—Ç–æ—Ä–∏—è –≤–∏–∑–∏—Ç–æ–≤"

class Pacient(models.Model):
    # üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    fool_name = models.CharField(max_length=400, verbose_name="–ü–æ–ª–Ω–æ–µ –§–ò–û", default="–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    email = models.EmailField(blank=True, null=True, verbose_name="Email")

    # üìå –¢–µ–ª–µ—Ñ–æ–Ω—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ + —Å–æ—Ü—Å–µ—Ç–∏)
    phone_number_1 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω 1")
    phone_number_2 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω 2")
    phone_number_3 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω 3")

    # üìå –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    medical_card_number = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã")
    birth_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è")
    attending_doctor = models.CharField(max_length=255, blank=True, null=True, verbose_name="–õ–µ—á–∞—â–∏–π –≤—Ä–∞—á")

    @property
    def age(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if self.birth_date:
            today = date.today()
            return today.year - self.birth_date.year - ((today.month, today.day) < (self.birth_date.month, self.birth_date.day))
        return None

    # üìå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    car_number_1 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è 1")
    car_number_2 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è 2")
    car_number_3 = models.CharField(max_length=20, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è 3")

    # üìå –°—Ç—Ä–∞—Ö–æ–≤–∫–∞
    insurance_policy_number = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª–∏—Å–∞")
    insurance_policy_file = models.FileField(upload_to="insurance_policies/", blank=True, null=True, verbose_name="–§–∞–π–ª —Å—Ç—Ä–∞—Ö–æ–≤–æ–≥–æ –ø–æ–ª–∏—Å–∞ (PDF)")

    # üìå –°–∫–∏–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞
    discount_card = models.PositiveIntegerField(default=0, verbose_name="–°–∫–∏–¥–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ (0-100%)")
    is_permanent_discount = models.BooleanField(default=False, verbose_name="–ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞")

    # üìå VIP-–∫–ª–∏–µ–Ω—Ç
    is_vip = models.BooleanField(default=False, verbose_name="VIP –∫–ª–∏–µ–Ω—Ç")

    # üìå –ö—Ä–µ–¥–∏—Ç
    credit_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å")

    # üìå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    notes = models.TextField(max_length=300, blank=True, null=True, verbose_name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

    # üìå –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è
    declaration_number = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ù–æ–º–µ—Ä –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏")
    declaration_file = models.FileField(upload_to="declarations/", blank=True, null=True, verbose_name="–§–∞–π–ª –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ (PDF)")

    # üìå –ê–Ω–∞–ª–∏–∑—ã (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤)
    analysis_files = models.FileField(upload_to="analysis_reports/", blank=True, null=True, verbose_name="–ê–Ω–∞–ª–∏–∑—ã (PDF)")

    # üìå –ò—Å—Ç–æ—Ä–∏—è —É—Å–ª—É–≥ –∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
    service_date = models.DateField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —É—Å–ª—É–≥–∏")
    service_code = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ö–æ–¥ —É—Å–ª—É–≥–∏")
    service_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏")
    service_price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–¶–µ–Ω–∞ —É—Å–ª—É–≥–∏")
    receipt_file = models.FileField(upload_to="receipts/", blank=True, null=True, verbose_name="–ö–≤–∏—Ç–∞–Ω—Ü–∏—è (PDF)")

    # üìå –ü–æ–ª
    gender = models.CharField(
        max_length=10,
        blank=True,
        null=True,
        choices=[("man", "–ú—É–∂—á–∏–Ω–∞"), ("woman", "–ñ–µ–Ω—â–∏–Ω–∞")],
        verbose_name="–ü–æ–ª"
    )

    # üìå –°–æ—Ü—Å–µ—Ç–∏
    instagram_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Instagram –ù–∏–∫")
    instagram_link = models.URLField(blank=True, null=True, verbose_name="Instagram –°—Å—ã–ª–∫–∞")
    instagram_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Instagram –¢–µ–ª–µ—Ñ–æ–Ω")

    telegram_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Telegram –ù–∏–∫")
    telegram_link = models.URLField(blank=True, null=True, verbose_name="Telegram –°—Å—ã–ª–∫–∞")
    telegram_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Telegram –¢–µ–ª–µ—Ñ–æ–Ω")

    facebook_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="Facebook –ù–∏–∫")
    facebook_link = models.URLField(blank=True, null=True, verbose_name="Facebook –°—Å—ã–ª–∫–∞")
    facebook_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Facebook –¢–µ–ª–µ—Ñ–æ–Ω")

    whatsapp_username = models.CharField(max_length=100, blank=True, null=True, verbose_name="WhatsApp –ù–∏–∫")
    whatsapp_link = models.URLField(blank=True, null=True, verbose_name="WhatsApp –°—Å—ã–ª–∫–∞")
    whatsapp_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="WhatsApp –¢–µ–ª–µ—Ñ–æ–Ω")

    viber_phone = models.CharField(max_length=20, blank=True, null=True, verbose_name="Viber –¢–µ–ª–µ—Ñ–æ–Ω")

    # üìå –ê–¥—Ä–µ—Å –∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è
    country = models.CharField(max_length=100, blank=True, null=True, verbose_name="–°—Ç—Ä–∞–Ω–∞")
    city = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ì–æ—Ä–æ–¥")
    address = models.TextField(blank=True, null=True, verbose_name="–ê–¥—Ä–µ—Å")

    # üìå –ò—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    source = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ò—Å—Ç–æ—á–Ω–∏–∫ (Instagram, —Ä–µ–∫–ª–∞–º–∞ –∏ —Ç. –¥.)")
    referred_by = models.CharField(max_length=255, blank=True, null=True, verbose_name="–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –∫–µ–º-—Ç–æ")

    # üìå –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    deal_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏")
    currency = models.CharField(max_length=10, blank=True, null=True, verbose_name="–í–∞–ª—é—Ç–∞")
    paid_amount = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞")
    payment_status = models.CharField(
        max_length=50,
        blank=True,
        null=True,
        choices=[("paid", "–û–ø–ª–∞—á–µ–Ω–æ"), ("pending", "–û–∂–∏–¥–∞–Ω–∏–µ"), ("overdue", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ")],
        verbose_name="–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã"
    )

    # üìå CRM-–¥–∞–Ω–Ω—ã–µ
    status = models.CharField(
        max_length=100,
        blank=True,
        null=True,
        choices=[("lead", "–õ–∏–¥"), ("client", "–ö–ª–∏–µ–Ω—Ç"), ("closed", "–ó–∞–∫—Ä—ã—Ç–æ")],
        verbose_name="–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞"
    )
    last_contact_date = models.DateTimeField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")
    next_followup_date = models.DateTimeField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True, related_name="created_contacts", verbose_name="–°–æ–∑–¥–∞–ª")
    updated_by = models.ForeignKey(User, on_delete=models.SET_NULL, blank=True, null=True, related_name="updated_contacts", verbose_name="–û–±–Ω–æ–≤–∏–ª")

    def __str__(self):
        return f"{self.fool_name}"

    class Meta:
        verbose_name = "–ü–∞—Ü–∏–µ–Ω—Ç"
        verbose_name_plural = "–ü–∞—Ü–∏–µ–Ω—Ç—ã"