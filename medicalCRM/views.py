from django.shortcuts import get_object_or_404
from rest_framework import viewsets
from rest_framework.generics import ListAPIView
from django.core.exceptions import ValidationError
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import AllowAny
from django.http import JsonResponse
from .models import VisitRecord, Doctor, Pacient
from .serializers import VisitRecordSerializer, DoctorSerializer, PatientSerializer
from django.http import JsonResponse
from .models import Doctor, Pacient, Nurse, ServicePriceList

from rest_framework import generics
from .models import Nurse, ServicePriceList, VisitRecord, Doctor, Pacient,ClinicRoom
from .serializers import NurseSerializer, ServiceSerializer, VisitSerializer, DoctorSerializer, PatientSerializer

from rest_framework.generics import UpdateAPIView
from .serializers import ClinicBranchSerializer, ClinicRoomSerializer
from .models import ClinicBranch, ClinicRoom
from rest_framework.decorators import api_view
from django.shortcuts import render, redirect
from .models import Pacient, Doctor, Nurse, ServicePriceList, VisitRecord
from django.contrib import messages


from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json


from rest_framework.generics import UpdateAPIView
from rest_framework.response import Response
from rest_framework import status
from django.shortcuts import get_object_or_404
from django.http import JsonResponse
import json

from .models import VisitRecord
from .serializers import VisitSerializer
from rest_framework.generics import RetrieveUpdateAPIView



class VisitViewSet(viewsets.ModelViewSet):
    queryset = VisitRecord.objects.all()
    serializer_class = VisitRecordSerializer  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä


class UpdateVisitView(RetrieveUpdateAPIView):
    """‚úÖ API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–∑–∏—Ç–∞"""
    queryset = VisitRecord.objects.all()
    serializer_class = VisitSerializer

    def patch(self, request, *args, **kwargs):
        visit = get_object_or_404(VisitRecord, pk=kwargs["pk"])  # ‚úÖ –¢–µ–ø–µ—Ä—å 404 –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏
        data = request.data

        visit.patient_id = data.get("patient") or visit.patient_id
        visit.doctor_id = data.get("doctor") or visit.doctor_id
        visit.visit_date = data.get("visit_date") or visit.visit_date
        visit.visit_time = data.get("visit_time") or visit.visit_time
        visit.visit_end_time = data.get("visit_end_time") or visit.visit_end_time
        visit.duration_minutes = data.get("duration_minutes") or visit.duration_minutes
        visit.description = data.get("description") or visit.description
        visit.payment_status = data.get("payment_status") or visit.payment_status

        # ‚úÖ –§–∏–∫—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –∏ –∫–∞–±–∏–Ω–µ—Ç–∞
        if "clinic_branch" in data:
            visit.clinic_branch = ClinicBranch.objects.get(pk=data["clinic_branch"])
        if "clinic_room" in data:
            visit.clinic_room = ClinicRoom.objects.get(pk=data["clinic_room"])

        visit.save()
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", visit.clinic_branch_id, visit.clinic_room_id)  # üëâ –ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
        return Response({"message": "‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"}, status=status.HTTP_200_OK)


def update_visit(request, visit_id):
    """‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–∑–∏—Ç–∞"""
    if request.method != "PATCH":
        return JsonResponse({"error": "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}, status=405)

    try:
        visit = VisitRecord.objects.get(id=visit_id)
        data = json.loads(request.body)

        visit.patient_id = data.get("patient", visit.patient_id)
        visit.doctor_id = data.get("doctor", visit.doctor_id)
        visit.visit_date = data.get("visit_date", visit.visit_date)
        visit.visit_time = data.get("visit_time", visit.visit_time)
        visit.visit_end_time = data.get("visit_end_time", visit.visit_end_time)
        visit.description = data.get("description", visit.description)
        visit.payment_status = data.get("payment_status", visit.payment_status)

        # üî• –û–±–Ω–æ–≤–ª—è–µ–º Many-to-Many –ø–æ–ª–µ "—É—Å–ª—É–≥–∏"
        services = data.get("services", None)
        if services is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω–æ –ª–∏ –ø–æ–ª–µ
            visit.services.set(services)

        visit.save()
        return JsonResponse({"message": "‚úÖ –í–∏–∑–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"}, status=200)

    except VisitRecord.DoesNotExist:
        return JsonResponse({"error": "‚ùå –í–∏–∑–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)


class DeleteVisitRecordView(APIView):
    """‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –≤–∏–∑–∏—Ç–µ"""
    def delete(self, request, record_id):
        visit = get_object_or_404(VisitRecord, pk=record_id)
        visit.delete()
        return Response({"message": f"‚úÖ –ó–∞–ø–∏—Å—å {record_id} —É–¥–∞–ª–µ–Ω–∞."}, status=status.HTTP_204_NO_CONTENT)

class VisitRecordViewSet(viewsets.ModelViewSet):
    """üìÖ API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –ø—Ä–∏–µ–º"""
    queryset = VisitRecord.objects.all()
    serializer_class = VisitRecordSerializer

    def create(self, request, *args, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        self.perform_create(serializer)
        return Response(serializer.data, status=status.HTTP_201_CREATED)

    def update(self, request, pk=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏)"""
        visit_record = get_object_or_404(VisitRecord, pk=pk)
        serializer = VisitRecordSerializer(visit_record, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def destroy(self, request, pk=None):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        visit_record = get_object_or_404(VisitRecord, pk=pk)
        visit_record.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)




class VisitListCreateView(generics.ListCreateAPIView):
    queryset = VisitRecord.objects.all()
    serializer_class = VisitSerializer

    def perform_create(self, serializer):
        visit = serializer.save()  # ‚úÖ –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤–∏–∑–∏—Ç–∞ –≤ –ë–î

        # üî• –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ (Many-to-Many –ø–æ–ª–µ)
        services = self.request.data.get("services", [])  # –ü–æ–ª—É—á–∞–µ–º —É—Å–ª—É–≥–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        if services:
            visit.services.set(services)  # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥–∏ –≤ –≤–∏–∑–∏—Ç

        visit.save()  # ‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

class NurseListView(generics.ListAPIView):
    queryset = Nurse.objects.all()
    serializer_class = NurseSerializer

class ServiceListView(generics.ListAPIView):
    queryset = ServicePriceList.objects.all().order_by("subgroup_number", "service_code")
    serializer_class = ServiceSerializer

class DoctorListView(generics.ListAPIView):
    queryset = Doctor.objects.all()
    serializer_class = DoctorSerializer

class PatientListView(generics.ListAPIView):
    queryset = Pacient.objects.all()
    serializer_class = PatientSerializer

class ClinicRoomViewSet(viewsets.ModelViewSet):
    queryset = ClinicRoom.objects.all()
    serializer_class = ClinicRoomSerializer

    def get_queryset(self):
        branch_id = self.request.query_params.get("branch")

        if not branch_id or not branch_id.isdigit():
            raise ValidationError("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π branch_id: –æ–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ!")

        return ClinicRoom.objects.filter(branch_id=branch_id)

class BranchListView(ListAPIView):
    queryset = ClinicBranch.objects.all()
    serializer_class = ClinicBranchSerializer
    permission_classes = [AllowAny]


class RoomListView(ListAPIView):
    queryset = ClinicRoom.objects.all()
    serializer_class = ClinicRoomSerializer
    permission_classes = [AllowAny]  # üëà –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –¥–ª—è –≤—Å–µ—Ö


    def get_queryset(self):
        branch_id = self.request.query_params.get("branch")
        if branch_id and branch_id.isdigit():  # ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
            return ClinicRoom.objects.filter(branch_id=branch_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä
        return ClinicRoom.objects.all()




def get_doctors(request):
    doctors = list(Doctor.objects.values('id', 'full_name'))
    return JsonResponse(doctors, safe=False)

def get_patients(request):
    patients = list(Pacient.objects.values('id', 'full_name'))
    return JsonResponse(patients, safe=False)

def get_nurses(request):
    nurses = list(Nurse.objects.values('id', 'full_name'))
    return JsonResponse(nurses, safe=False)

def get_services(request):
    services = list(ServicePriceList.objects.values("id", "subgroup_number", "subgroup_name", "service_code", "service_name", "service_price"))
    return JsonResponse(services, safe=False)





def index(request):
    patients = Pacient.objects.all()
    doctors = Doctor.objects.all()
    nurses = Nurse.objects.all()
    services = ServicePriceList.objects.all().order_by("subgroup_number", "service_code")  # üîπ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º

    return render(request, "medicalCRM/index.html", {
        "patients": patients,
        "doctors": doctors,
        "nurses": nurses,
        "services": services,
    })

def create_visit(request):
    if request.method == "POST":
        patient_id = request.POST.get("patient")
        doctor_id = request.POST.get("doctor")
        nurse_id = request.POST.get("nurse")
        visit_date = request.POST.get("visit_date")
        visit_time = request.POST.get("visit_time")
        service_id = request.POST.get("service")
        payment_status = request.POST.get("payment_status")

        if not patient_id or not doctor_id or not service_id:
            messages.error(request, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è!")
            return redirect("index")

        patient = Pacient.objects.get(id=patient_id)
        doctor = Doctor.objects.get(id=doctor_id)
        nurse = Nurse.objects.get(id=nurse_id) if nurse_id else None
        service = ServicePriceList.objects.get(id=service_id)

        visit = VisitRecord.objects.create(
            patient=patient,
            doctor=doctor,
            nurse=nurse,
            visit_date=visit_date,
            visit_time=visit_time,
            total_price=service.service_price,
            payment_status=payment_status
        )
        visit.services.add(service)

        messages.success(request, "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        return redirect("index")

    return redirect("index")

