# Generated by Django 5.1.4 on 2025-03-07 08:34

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClinicBranch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_name', models.CharField(max_length=100, verbose_name='Название филиала')),
                ('branch_address', models.CharField(max_length=255, verbose_name='Адрес филиала')),
                ('work_schedule', models.JSONField(blank=True, null=True, verbose_name='График работы')),
            ],
            options={
                'verbose_name': 'Филиал клиники',
                'verbose_name_plural': 'Филиалы клиники',
            },
        ),
        migrations.CreateModel(
            name='ServicePriceList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_code', models.CharField(max_length=50, unique=True, verbose_name='Код услуги')),
                ('service_name', models.CharField(max_length=255, verbose_name='Название услуги')),
                ('service_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена услуги')),
            ],
            options={
                'verbose_name': 'Прайс-лист услуги',
                'verbose_name_plural': 'Прайс-лист услуг',
            },
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Специализация')),
            ],
            options={
                'verbose_name': 'Специализация',
                'verbose_name_plural': 'Специализации',
            },
        ),
        migrations.CreateModel(
            name='ClinicRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room_number', models.CharField(max_length=50, verbose_name='Номер кабинета')),
                ('branch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='medicalCRM.clinicbranch', verbose_name='Филиал')),
            ],
            options={
                'verbose_name': 'Кабинет',
                'verbose_name_plural': 'Кабинеты',
            },
        ),
        migrations.CreateModel(
            name='Nurse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fool_name', models.CharField(default='Имя не указано', max_length=400, verbose_name='Полное ФИО')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicalCRM.clinicbranch', verbose_name='Филиал работы')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicalCRM.clinicroom', verbose_name='Кабинет')),
            ],
            options={
                'verbose_name': 'Медсестра',
                'verbose_name_plural': 'Медсестры',
            },
        ),
        migrations.CreateModel(
            name='Pacient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fool_name', models.CharField(default='Имя не указано', max_length=400, verbose_name='Полное ФИО')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone_number_1', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон 1')),
                ('phone_number_2', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон 2')),
                ('phone_number_3', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон 3')),
                ('medical_card_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер медицинской карты')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('attending_doctor', models.CharField(blank=True, max_length=255, null=True, verbose_name='Лечащий врач')),
                ('car_number_1', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер автомобиля 1')),
                ('car_number_2', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер автомобиля 2')),
                ('car_number_3', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер автомобиля 3')),
                ('insurance_policy_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер страхового полиса')),
                ('insurance_policy_file', models.FileField(blank=True, null=True, upload_to='insurance_policies/', verbose_name='Файл страхового полиса (PDF)')),
                ('discount_card', models.PositiveIntegerField(default=0, verbose_name='Скидочная карта (0-100%)')),
                ('is_permanent_discount', models.BooleanField(default=False, verbose_name='Постоянная скидка')),
                ('is_vip', models.BooleanField(default=False, verbose_name='VIP клиент')),
                ('credit_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Кредитная задолженность')),
                ('notes', models.TextField(blank=True, max_length=300, null=True, verbose_name='Комментарии')),
                ('declaration_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер декларации')),
                ('declaration_file', models.FileField(blank=True, null=True, upload_to='declarations/', verbose_name='Файл декларации (PDF)')),
                ('analysis_files', models.FileField(blank=True, null=True, upload_to='analysis_reports/', verbose_name='Анализы (PDF)')),
                ('service_date', models.DateField(blank=True, null=True, verbose_name='Дата услуги')),
                ('service_code', models.CharField(blank=True, max_length=50, null=True, verbose_name='Код услуги')),
                ('service_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Название услуги')),
                ('service_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Цена услуги')),
                ('receipt_file', models.FileField(blank=True, null=True, upload_to='receipts/', verbose_name='Квитанция (PDF)')),
                ('gender', models.CharField(blank=True, choices=[('man', 'Мужчина'), ('woman', 'Женщина')], max_length=10, null=True, verbose_name='Пол')),
                ('instagram_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Instagram Ник')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='Instagram Ссылка')),
                ('instagram_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Instagram Телефон')),
                ('telegram_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Telegram Ник')),
                ('telegram_link', models.URLField(blank=True, null=True, verbose_name='Telegram Ссылка')),
                ('telegram_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telegram Телефон')),
                ('facebook_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Facebook Ник')),
                ('facebook_link', models.URLField(blank=True, null=True, verbose_name='Facebook Ссылка')),
                ('facebook_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Facebook Телефон')),
                ('whatsapp_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='WhatsApp Ник')),
                ('whatsapp_link', models.URLField(blank=True, null=True, verbose_name='WhatsApp Ссылка')),
                ('whatsapp_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='WhatsApp Телефон')),
                ('viber_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Viber Телефон')),
                ('country', models.CharField(blank=True, max_length=100, null=True, verbose_name='Страна')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Город')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Адрес')),
                ('source', models.CharField(blank=True, max_length=255, null=True, verbose_name='Источник (Instagram, реклама и т. д.)')),
                ('referred_by', models.CharField(blank=True, max_length=255, null=True, verbose_name='Рекомендован кем-то')),
                ('deal_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Сумма сделки')),
                ('currency', models.CharField(blank=True, max_length=10, null=True, verbose_name='Валюта')),
                ('paid_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Оплаченная сумма')),
                ('payment_status', models.CharField(blank=True, choices=[('paid', 'Оплачено'), ('pending', 'Ожидание'), ('overdue', 'Просрочено')], max_length=50, null=True, verbose_name='Статус оплаты')),
                ('status', models.CharField(blank=True, choices=[('lead', 'Лид'), ('client', 'Клиент'), ('closed', 'Закрыто')], max_length=100, null=True, verbose_name='Статус клиента')),
                ('last_contact_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата последнего контакта')),
                ('next_followup_date', models.DateTimeField(blank=True, null=True, verbose_name='Дата следующего контакта')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contacts', to=settings.AUTH_USER_MODEL, verbose_name='Создал')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_contacts', to=settings.AUTH_USER_MODEL, verbose_name='Обновил')),
            ],
            options={
                'verbose_name': 'Пациент',
                'verbose_name_plural': 'Пациенты',
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fool_name', models.CharField(default='Имя не указано', max_length=400, verbose_name='Полное ФИО')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone_number_1', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон 1')),
                ('phone_number_2', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон 2')),
                ('phone_number_3', models.CharField(blank=True, max_length=20, null=True, verbose_name='Телефон 3')),
                ('address', models.CharField(blank=True, max_length=255, null=True, verbose_name='Адрес')),
                ('gender', models.CharField(choices=[('male', 'Мужской'), ('female', 'Женский')], max_length=10, verbose_name='Пол')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='doctors_photos/', verbose_name='Фото')),
                ('education', models.TextField(blank=True, null=True, verbose_name='Образование')),
                ('experience_years', models.PositiveIntegerField(blank=True, null=True, verbose_name='Опыт (лет)')),
                ('certifications', models.TextField(blank=True, null=True, verbose_name='Сертификаты')),
                ('languages', models.CharField(blank=True, max_length=255, null=True, verbose_name='Языки')),
                ('work_schedule', models.JSONField(blank=True, null=True, verbose_name='Рабочий график')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Заметки')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('car_number_1', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер автомобиля 1')),
                ('car_number_2', models.CharField(blank=True, max_length=20, null=True, verbose_name='Номер автомобиля 2')),
                ('instagram_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Instagram Ник')),
                ('instagram_link', models.URLField(blank=True, null=True, verbose_name='Instagram Ссылка')),
                ('instagram_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Instagram Телефон')),
                ('telegram_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Telegram Ник')),
                ('telegram_link', models.URLField(blank=True, null=True, verbose_name='Telegram Ссылка')),
                ('telegram_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Telegram Телефон')),
                ('facebook_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='Facebook Ник')),
                ('facebook_link', models.URLField(blank=True, null=True, verbose_name='Facebook Ссылка')),
                ('facebook_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Facebook Телефон')),
                ('whatsapp_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='WhatsApp Ник')),
                ('whatsapp_link', models.URLField(blank=True, null=True, verbose_name='WhatsApp Ссылка')),
                ('whatsapp_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='WhatsApp Телефон')),
                ('viber_phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Viber Телефон')),
                ('branch_work', models.CharField(blank=True, max_length=255, null=True, verbose_name='Филиал работы')),
                ('branch_work2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Филиал работы2')),
                ('branch_work3', models.CharField(blank=True, max_length=255, null=True, verbose_name='Филиал работы3')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='doctors', to='medicalCRM.clinicbranch', verbose_name='Филиал')),
                ('room', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='doctors', to='medicalCRM.clinicroom', verbose_name='Кабинет')),
                ('services', models.ManyToManyField(to='medicalCRM.servicepricelist', verbose_name='Оказанные услуги')),
                ('specializations', models.ManyToManyField(to='medicalCRM.specialization', verbose_name='Специализации')),
            ],
            options={
                'verbose_name': 'Врач',
                'verbose_name_plural': 'Врачи',
            },
        ),
        migrations.CreateModel(
            name='VisitHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateField(verbose_name='Дата визита')),
                ('visit_time', models.TimeField(verbose_name='Время визита')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Общая стоимость визита')),
                ('is_online', models.BooleanField(default=False, verbose_name='Онлайн прием')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления в историю')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicalCRM.doctor', verbose_name='Врач')),
                ('nurse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicalCRM.nurse', verbose_name='Медсестра')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicalCRM.pacient', verbose_name='Пациент')),
                ('services', models.ManyToManyField(to='medicalCRM.servicepricelist', verbose_name='Оказанные услуги')),
            ],
            options={
                'verbose_name': 'История визита',
                'verbose_name_plural': 'История визитов',
            },
        ),
        migrations.CreateModel(
            name='VisitRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_date', models.DateField(verbose_name='Дата визита')),
                ('visit_time', models.TimeField(verbose_name='Время визита')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Общая стоимость визита')),
                ('payment_status', models.CharField(choices=[('pending', 'В обработке'), ('paid', 'Предоплата'), ('completed', 'Проведено'), ('paid_finish', 'Оплачено')], default='pending', max_length=20, verbose_name='Статус визита')),
                ('is_online', models.BooleanField(default=False, verbose_name='Онлайн прием')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания записи')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Дата обновления записи')),
                ('doctor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicalCRM.doctor', verbose_name='Врач')),
                ('nurse', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='medicalCRM.nurse', verbose_name='Медсестра')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='medicalCRM.pacient', verbose_name='Пациент')),
                ('services', models.ManyToManyField(to='medicalCRM.servicepricelist', verbose_name='Оказанные услуги')),
            ],
            options={
                'verbose_name': 'Запись на прием',
                'verbose_name_plural': 'Записи на прием',
            },
        ),
    ]
